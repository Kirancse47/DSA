struct Node{
    int key;
    int val;
    Node* next;
    Node* prev;
    Node(int k,int v){
        key=k;
        val=v;
        next=NULL;
        prev=NULL;
    }
};

class LRUCache {
    unordered_map<int,Node*> mp;
    int capacity;
    Node* front;
    Node* rear;
  public:
    LRUCache(int cap) {
        capacity=cap;
        front=new Node(-1,-1);
        rear=new Node(-1,-1);
        front->next=rear;
        rear->prev=front;
    }

    void putFront(Node* node){
        node->next=front->next;
        node->prev=front;
        
        front->next->prev=node;
        front->next=node;
    }
    
    void removeNode(Node* node){
        node->prev->next = node->next;
        node->next->prev = node->prev;
    }
    
    int get(int key) {
        if(mp.find(key)==mp.end()) return -1;
        Node* node=mp[key];
        removeNode(node);
        putFront(node);
        return node->val;
    }

    void put(int key, int value) {
        if(capacity==0) return;
        if(mp.find(key)!=mp.end()){
            Node* node=mp[key];
            node->val=value;
            removeNode(node);
            putFront(node);
        }else{
            if(mp.size()>=capacity){
                Node *temp=rear->prev;
                mp.erase(temp->key);
                removeNode(temp);
                delete(temp);
            }
            Node *node=new Node(key,value);
            mp[key]=node;
            putFront(node);
        }
    }
};

Link - https://practice.geeksforgeeks.org/problems/lru-cache/1
