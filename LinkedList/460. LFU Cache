struct Node {
    int key, value, freq;
    Node* prev;
    Node* next;
    Node(int k, int v) : key(k), value(v), freq(1), prev(nullptr), next(nullptr) {}
};

struct DLList {
    Node* head;
    Node* tail;
    int size;
    DLList() {
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head->next = tail;
        tail->prev = head;
        size = 0;
    }
    void addFront(Node* node) {
        node->next = head->next;
        node->prev = head;
        head->next->prev = node;
        head->next = node;
        size++;
    }
    void remove(Node* node) {
        node->prev->next = node->next;
        node->next->prev = node->prev;
        size--;
    }
    Node* removeLast() {
        if(size == 0) return nullptr;
        Node* node = tail->prev;
        remove(node);
        return node;
    }
};

class LFUCache {
    int capacity, minFreq, curSize;
    unordered_map<int, Node*> keyNode;
    unordered_map<int, DLList*> freqList;
public:
    LFUCache(int capacity) {
        this->capacity = capacity;
        minFreq = 0;
        curSize = 0;
    }

    void update(Node* node) {
        int freq = node->freq;
        freqList[freq]->remove(node);
        if(freq == minFreq && freqList[freq]->size == 0) {
            minFreq++;
        }
        node->freq++;
        if(!freqList.count(node->freq)) {
            freqList[node->freq] = new DLList();
        }
        freqList[node->freq]->addFront(node);
    }

    int get(int key) {
        if(!keyNode.count(key)) return -1;
        Node* node = keyNode[key];
        update(node);
        return node->value;
    }

    void put(int key, int value) {
        if(capacity == 0) return;

        if(keyNode.count(key)) {
            Node* node = keyNode[key];
            node->value = value;
            update(node);
        } else {
            if(curSize == capacity) {
                Node* toRemove = freqList[minFreq]->removeLast();
                keyNode.erase(toRemove->key);
                curSize--;
            }
            Node* node = new Node(key, value);
            minFreq = 1;
            if(!freqList.count(minFreq)) {
                freqList[minFreq] = new DLList();
            }
            freqList[minFreq]->addFront(node);
            keyNode[key] = node;
            curSize++;
        }
    }
};
