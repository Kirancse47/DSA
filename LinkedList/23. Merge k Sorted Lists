// Using Brute Force...
    ListNode *merge(ListNode *l1,ListNode *l2){
        ListNode *d=new ListNode(0), *p=d;
        while(l1 && l2){
            if(l1->val < l2->val){
                p->next=l1;
                l1=l1->next;
            }else{
                p->next=l2;
                l2=l2->next;
            }
            p=p->next;
        }
        if(l1) p->next=l1;
        if(l2) p->next=l2;
        return d->next;
    }
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n=lists.size();
        if(n==0) return NULL;
        if(n==1) return lists[0];
        ListNode *ans=merge(lists[0],lists[1]);
        for(int i=2;i<n;i++){
            ans=merge(ans,lists[i]);
        }
        return ans;
    }
    
// Using MinHeap...
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n=lists.size();
        if(n==0) return NULL;
        if(n==1) return lists[0];
        
        priority_queue< pair<int,ListNode*>,vector<pair<int,ListNode*>>, greater<pair<int,ListNode*>> > q;
        for(int i=0;i<n;i++){
            if(lists[i]){
                q.push({lists[i]->val,lists[i]});
            }
        }
        
        ListNode *dummy=new ListNode(0), *ptr=dummy;
        while(!q.empty()){
            auto it=q.top();q.pop();
            ptr->next=it.second;
            ptr=ptr->next;
            if(it.second->next){
                q.push({it.second->next->val,it.second->next});
            }
        }
        return dummy->next;
    }
