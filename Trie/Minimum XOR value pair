// Type 1...
class Trie{
    public:
        Trie *left;
        Trie *right;
        Trie(){
            left=NULL;
            right=NULL;
        }
};

class Solution{   
public:

    void insert(Trie *head,int n){
        Trie *cur=head;
        for(int i=31;i>=0;i--){
            int b=(n>>i & 1);
            if(b){
                if(!cur->right){
                    cur->right=new Trie();
                }
                cur=cur->right;
            }else{
                if(!cur->left){
                    cur->left=new Trie();
                }
                cur=cur->left;
            }
        }
    }
    
    int min_xor(Trie *head,int val){
        int xors=0;
        Trie *cur=head;
        for(int j=31;j>=0;j--){
            int b=(val>>j & 1);
            if(b){
                if(cur->right){
                    cur=cur->right;
                }else{
                    cur=cur->left;
                    xors+=pow(2,j);
                }
            }else{
                if(cur->left){
                    cur=cur->left;
                }else{
                    cur=cur->right;
                    xors+=pow(2,j);
                }
            }
        }
        return xors;
    }
    
    int minxorpair(int N, int arr[]){
        Trie *head=new Trie();
        
        insert(head,arr[0]);
        int ans=INT_MAX;
        for(int i=1;i<N;i++){
            ans=min(ans,min_xor(head,arr[i]));
            insert(head,arr[i]);
        }
        return ans;
    }
    

// Type 2....
class TrieNode
{
public:
    TrieNode *child[2];
    TrieNode()
    {
        this->child[0] = NULL;
        this->child[1] = NULL;
    }
};
class Solution
{
public:
    TrieNode *root;
    void insert(int x)
    {
        TrieNode *curr = root;
        bitset<32> bt(x);
        for (int i = 31; i >= 0; i--)
        {
            if (curr->child[bt[i]] == NULL)
                curr->child[bt[i]] = new TrieNode();
            curr = curr->child[bt[i]];
        }
    }
    int minXOR(int x)
    {
        int ans = 0;
        TrieNode *curr = root;
        bitset<32> bt(x);
        for (int i = 31; i >= 0; i--)
        {
            if (curr->child[bt[i]])
                curr = curr->child[bt[i]];
            else
            {
                ans += 1 << i;
                curr = curr->child[!bt[i]];
            }
        }
        return ans;
    }

    int minxorpair(int N, int arr[])
    {
        root = new TrieNode();
        insert(arr[0]);
        int ans = INT_MAX;
        for (int i = 1; i < N; i++)
        {
            ans = min(ans, minXOR(arr[i]));
            insert(arr[i]);
        }
        return ans;
    }
};

Link - https://practice.geeksforgeeks.org/problems/minimum-xor-value-pair/1
