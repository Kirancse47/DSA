Q : 
Suppose we have a class:

public class Foo {
  public void first() { print("first"); }
  public void second() { print("second"); }
  public void third() { print("third"); }
}
The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().

#Sol1 uning mutex only...

class Foo {
    mutex m1,m2,m3;
public:
    Foo() {
        m2.lock();
        m3.lock();
    }
    void first(function<void()> printFirst) {
        m1.lock();
        // printFirst() outputs "first". Do not change or remove this line.
        printFirst();
        m1.unlock();
        m2.unlock();
    }
    void second(function<void()> printSecond) {
        m2.lock();
        // printSecond() outputs "second". Do not change or remove this line.
        printSecond();
        m2.unlock();
        m3.unlock();
    }
    void third(function<void()> printThird) {
        m3.lock();
        // printThird() outputs "third". Do not change or remove this line.
        printThird();
        m3.unlock();
    }
};


#Sol2 usning mutex and condition variable...

class Foo {
    mutex m;
    condition_variable cv;
    int state=1;
public:
    Foo() { 
    }
    void first(function<void()> printFirst) {
        unique_lock<mutex> lock(m);
        // printFirst() outputs "first". Do not change or remove this line.
        state=2;
        printFirst();
        cv.notify_all();
    }
    void second(function<void()> printSecond) {
        unique_lock<mutex> lock(m);
        // printSecond() outputs "second". Do not change or remove this line.
        cv.wait(lock,[&](){ return state==2; });
        state=3;
        printSecond();
        cv.notify_all();
    }
    void third(function<void()> printThird) {
        unique_lock<mutex> lock(m);
        cv.wait(lock,[&](){ return state==3; });
        // printThird() outputs "third". Do not change or remove this line.
        printThird();
    }
};
