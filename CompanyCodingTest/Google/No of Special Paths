#include<bits/stdc++.h>
using namespace std;

void dfs(int i,int p,int start,unordered_map<int,vector<int>> &adj,vector<int> &val,int &ans){
    if(p!=-1 && val[i]>val[start]) return;
    if(p!=-1 && val[i]==val[start]) ans++;
    for(auto it : adj[i]){
        if(it==p) continue;
        dfs(it,i,start,adj,val,ans);
    }
}

int countSpecialPath(int n,vector<vector<int>> &edges,vector<int> &val){
    unordered_map<int,vector<int>> adj;
    for(auto it : edges){
        adj[it[0]-1].push_back(it[1]-1);
        adj[it[1]-1].push_back(it[0]-1);
    }
    int ans=0;
    for(int i=0;i<n;i++){
        dfs(i,-1,i,adj,val,ans);
    }
    return ans/2;
}

int main(){
    int n;cin>>n;
    vector<vector<int>> edges(n-1,vector<int>(2));
    vector<int> val(n);
    for(int i=0;i<n-1;i++){
        cin>>edges[i][0]>>edges[i][1];
    }
    for(int i=0;i<n;i++) cin>>val[i];
    cout<<countSpecialPath(n,edges,val)<<endl;
    return 0;
}
