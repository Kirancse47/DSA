#include <bits/stdc++.h>
using namespace std;

class HashMap {
    static const int SIZE = 10; // number of buckets
    vector<pair<int, int>> table[SIZE]; // each bucket is a vector of (key, value)

    int hashFunction(int key) {
        return key % SIZE; // simple mod hash
    }

public:
    // Insert or update
    void insert(int key, int value) {
        int idx = hashFunction(key);
        for (auto &p : table[idx]) {
            if (p.first == key) { // key already exists
                p.second = value; // update value
                return;
            }
        }
        table[idx].push_back({key, value}); // insert new
    }

    // Search
    bool search(int key, int &value) {
        int idx = hashFunction(key);
        for (auto &p : table[idx]) {
            if (p.first == key) {
                value = p.second;
                return true;
            }
        }
        return false;
    }

    // Erase
    void erase(int key) {
        int idx = hashFunction(key);
        auto &bucket = table[idx];
        for (auto it = bucket.begin(); it != bucket.end(); ++it) {
            if (it->first == key) {
                bucket.erase(it);
                return;
            }
        }
    }

    // Display entire hashmap
    void display() {
        for (int i = 0; i < SIZE; i++) {
            cout << i << ": ";
            for (auto &p : table[i]) {
                cout << "[" << p.first << "=>" << p.second << "] ";
            }
            cout << "\n";
        }
    }
};

int main() {
    HashMap mp;
    mp.insert(1, 10);
    mp.insert(2, 20);
    mp.insert(11, 110); // collision with key=1 (since 11 % 10 == 1)

    mp.display();

    int val;
    if (mp.search(11, val))
        cout << "Found key=11, value=" << val << "\n";
    else
        cout << "Key not found\n";

    mp.erase(2);
    mp.display();
}
