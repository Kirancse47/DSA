// Memoization...
    int solve(int ind,int prevind,vector<int> &nums,vector<vector<int>> &dp){
        if(ind==nums.size()) return 0;
        if(dp[ind][prevind+1]!=-1) return dp[ind][prevind+1];
        int len=solve(ind+1,prevind,nums,dp);
        if(prevind==-1 || nums[ind]>nums[prevind])
            len=max(len,1+solve(ind+1,ind,nums,dp));
        return dp[ind][prevind+1]=len;
    }
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> dp(n,vector<int>(n+1,-1));
        return solve(0,-1,nums,dp);
    }
    
//Tabulation..
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        for(int i=n-1;i>=0;i--){
            for(int j=i-1;j>=-1;j--){
                int len=dp[i+1][j+1];
                if(j==-1 || nums[i]>nums[j])
                    len=max(len,1+dp[i+1][i+1]);
                dp[i][j+1]=len;
            }
        }
        return dp[0][-1+1];
    }
    
// Space Optimized..
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> next(n+1,0), cur(n+1,0);
        for(int i=n-1;i>=0;i--){
            for(int j=i-1;j>=-1;j--){
                int len=next[j+1];
                if(j==-1 || nums[i]>nums[j])
                    len=max(len,1+next[i+1]);
                cur[j+1]=len;
            }
            next=cur;
        }
        return next[-1+1];
    }
    
    
// Easy approch..
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,1);
        int ans=1;
        for(int i=1;i<n;i++){
            for(int j=i-1;j>=0;j--){
                if(nums[i]>nums[j]){
                    dp[i]=max(dp[i],1+dp[j]);
                }
            }
            ans=max(ans,dp[i]);
        }
        return ans;
    }
    
    
// Print LIS... 
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,1),idx(n);
        int ans=1,lastIdx=0;
        for(int i=1;i<n;i++){
            idx[i]=i;
            for(int j=i-1;j>=0;j--){
                if(nums[i]>nums[j] && 1+dp[j]>dp[i]){
                    dp[i]=1+dp[j];
                    idx[i]=j;
                }
            }
            if(dp[i]>ans){
                ans=dp[i];
                lastIdx=i;
            }
            
        }
        vector<int>lis;
        lis.push_back(nums[lastIdx]);
        while(idx[lastIdx]!=lastIdx){
            lastIdx=idx[lastIdx];
            lis.push_back(nums[lastIdx]);
        }
        reverse(lis.begin(),lis.end());
        for(auto it : lis) cout<<it;cout<<endl;
        return lis.size();
    }
    
    
// Using Binary Search...
     int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> seq;
        for(int i=0;i<n;i++){
            auto it=lower_bound(seq.begin(),seq.end(),nums[i]);
            if(it==seq.end()) seq.push_back(nums[i]);
            else *it=nums[i];
        }
        return seq.size(); 
    } 
