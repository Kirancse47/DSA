// Using Two Stack and Array...
    int largestRectangleArea(vector<int>& a) {
        int n=a.size();
        vector<int> l(n,-1),r(n,n);
        
        stack<int> st1;
        st1.push(n-1);
        r[n-1]=n;
        for(int i=n-2;i>=0;i--){
            while(st1.size()>0 && a[i]<=a[st1.top()]) st1.pop();
            if(st1.size()==0) r[i]=n;
            else r[i]=st1.top();
            st1.push(i);
        }

        stack<int> st2;
        st2.push(0);
        l[0]=-1;
        for(int i=1;i<n;i++){
            while(st2.size()>0 && a[i]<=a[st2.top()]) st2.pop();
            if(st2.size()==0) l[i]=-1;
            else l[i]=st2.top();
            st2.push(i);
        }

        int mxA=0;
        for(int i=0;i<n;i++){
            mxA=max(mxA,(r[i]-l[i]-1)*a[i]);
        }
        return mxA;
    }
    
// Using one stack...
    int largestRectangleArea(vector<int>& a) {
        int n=a.size();
        int maxA=0;
        stack<int> st;
        for(int i=0;i<=n;i++){
            while(!st.empty() && (i==n || a[st.top()]>=a[i])){
                int h=a[st.top()];
                st.pop();
                int width;
                if(st.empty()) width=i;
                else width=i-st.top()-1;
                maxA=max(maxA,h*width);
            }
            st.push(i);
        }
        return maxA;
    }   
