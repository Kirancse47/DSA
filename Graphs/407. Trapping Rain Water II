    int trapRainWater(vector<vector<int>>& heightMap) {
        int m=heightMap.size(),n=heightMap[0].size();
        if(m<3 || n<3) return 0;
        vector<vector<bool>> vis(m,vector<bool>(n,false));
        priority_queue< vector<int>, vector<vector<int>>, greater<vector<int>> > pq;
        for(int i=0;i<m;i++){
            pq.push({heightMap[i][0],i,0});
            pq.push({heightMap[i][n-1],i,n-1});
            vis[i][0]=vis[i][n-1]=true;
        }
        for(int i=0;i<n;i++){
            pq.push({heightMap[0][i],0,i});
            pq.push({heightMap[m-1][i],m-1,i});
            vis[0][i]=vis[m-1][i]=true;
        }
        int water=0,level=0;
        int dx[]={0,0,1,-1};
        int dy[]={1,-1,0,0};
        while(!pq.empty()){
            auto it=pq.top();pq.pop();
            int height=it[0],i=it[1],j=it[2];
            level=max(level,height);
            for(int k=0;k<4;k++){
                int x=i+dx[k];
                int y=j+dy[k];
                if(x>=0 && x<m && y>=0 && y<n && !vis[x][y]){
                    pq.push({heightMap[x][y],x,y});
                    vis[x][y]=true;
                    if(heightMap[x][y]<level) water+=(level-heightMap[x][y]);
                }
            }
        }
        return water;
    }
