void topoSort(int node,stack<int> &st,vector<int> &vis,vector<pair<int,int>> adj[]){
    vis[node]=1;
    for(auto it : adj[node]){
        if(!vis[it.first]){
            topoSort(it.first,st,adj);
        }
    }
    st.push(node);
}
vector<int> shortestPath(int src,int n,vector<pair<int,int>> adj[]){
    vector<int> dis(n,1e9);
    vector<int> vis(n,0);
    stack<int> st;
    for(int i=0;i<n;i++){
        if(!vis[i]) topoSort(i,st,vis,adj);
    }
    dis[src]=0;
    while(!st.empty()){
        int node=st.top();st.pop();
        if(dis[node]!=1e9){
            for(auto it : adj[node]){
                if(dis[node]+it.second < dis[it.first]){
                    dis[it.first]=it.second+dis[node];
                }
            }
        }
    }
    return dis;
}

Link - https://www.geeksforgeeks.org/shortest-path-for-directed-acyclic-graphs/
