// Using BFS...
	vector<int> topoSort(int V, vector<int> adj[]) {
	    vector<int> ans;
	    vector<int> inDeg(V,0);
	    for(int i=0;i<V;i++){
	        for(auto it : adj[i]){
	            inDeg[it]++;
	        }
	    }
	    
	    queue<int> q;
	    for(int i=0;i<V;i++){
	        if(inDeg[i]==0) q.push(i);
	    }
	    
	    while(!q.empty()){
	        int node=q.front();q.pop();
	        ans.push_back(node);
	        for(auto it : adj[node]){
	            inDeg[it]--;
	            if(inDeg[it]==0) q.push(it);
	        }
	    }
	    return ans;
	}
	
// Using DFS...
    void dfs(int node,vector<int> adj[],stack<int> &st,vector<int> &vis){
        vis[node]=1;
        for(auto it : adj[node]){
            if(!vis[it]){
                dfs(it,adj,st,vis);
            }
        }
        st.push(node);
    }
	vector<int> topoSort(int V, vector<int> adj[]) {
	    vector<int> ans;
	    vector<int> vis(V,0);
	    stack<int>st;
	    for(int i=0;i<V;i++){
	        if(!vis[i]) dfs(i,adj,st,vis);
	    }
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}
	
	Links - https://practice.geeksforgeeks.org/problems/topological-sort/1/
