// Using BFS(Like Topo Sort)...
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> inDeg(V,0);
        for(int i=0;i<V;i++){
            for(auto it : adj[i]) inDeg[it]++;
        }
        
        queue<int> q;
        for(int i=0;i<V;i++){
            if(inDeg[i]==0) q.push(i);
        }
        
        int cnt=0;
        while(!q.empty()){
            int node=q.front();q.pop();
            cnt++;
            for(auto it : adj[node]){
                inDeg[it]--;
                if(inDeg[it]==0) q.push(it);
            }
        }
        return !(cnt==V);
    }

// Using DFS...
    bool dfs(int node,vector<int> adj[],vector<int> &vis,vector<int> &dfsVis){
        vis[node]=1;
        dfsVis[node]=1;
        for(auto it : adj[node]){
            if(!vis[it]){
                // vis[it]=1;
                // dfsVis[it]=1;
                if(dfs(it,adj,vis,dfsVis)) return true;
            }else if(dfsVis[it]) return true;
        }
        dfsVis[node]=0;  //**Backtrack...
        return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> vis(V,0);
        vector<int> dfsVis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                // vis[i]=1;
                // dfsVis[i]=1;
                if(dfs(i,adj,vis,dfsVis)) return true; 
            }
        }
        return false;
    }
    
    Link - https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1/
