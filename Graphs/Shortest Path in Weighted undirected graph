    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        vector<pair<int,int>> adj[n+1];
        for(auto it : edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> >pq;
        vector<int> dist(n+1,1e9);
        vector<int> parent(n+1);
        for(int i=1;i<=n;i++) parent[i]=i;
        pq.push({0,1});
        dist[1]=0;
        while(!pq.empty()){
            int node=pq.top().second;
            int dis=pq.top().first;
            pq.pop();
            for(auto it : adj[node]){
                if(it.second+dis<dist[it.first]){
                    dist[it.first]=it.second+dis;
                    parent[it.first]=node;
                    pq.push({dist[it.first],it.first});
                }
            }
        }
        if(dist[n]==1e9) return {-1};
        vector<int> ans;
        int i=n;
        while(parent[i]!=i){
            ans.push_back(i);
            i=parent[i];
        }
        ans.push_back(1);
        ans.push_back(dist[n]);
        reverse(ans.begin(),ans.end());
        return ans;
    }

gfg link - https://www.geeksforgeeks.org/problems/shortest-path-in-weighted-undirected-graph/1
