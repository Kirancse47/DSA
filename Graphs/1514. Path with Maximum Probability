    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<pair<int,double>> adj[n];
        vector<double> prob(n,0);
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        priority_queue<pair<double,int>> pq;
        pq.push({1.0,start_node});
        prob[start_node]=1.0;
        while(!pq.empty()){
            int node=pq.top().second;
            double p=pq.top().first;
            pq.pop();
            for(auto it : adj[node]){
                if(prob[it.first]<(p*it.second)){
                    prob[it.first]=p*it.second;
                    pq.push({p*it.second,it.first});
                }
            }
        }
        return prob[end_node];
    }
