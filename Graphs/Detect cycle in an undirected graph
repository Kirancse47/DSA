//Using BFS...
  bool checkCycle(int i,vector<int> adj[],vector<int> &vis){
        queue<pair<int,int>> q;
        vis[i]=1;
        q.push({i,-1});
        while(!q.empty()){
            int node=q.front().first;
            int pre=q.front().second;
            q.pop();
            for(auto it : adj[node]){
                if(!vis[it]){
                    vis[it]=1;
                    q.push({it,node});
                }
                else if(pre!=it){
                    return true;
                }
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> vis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(checkCycle(i,adj,vis)){
                    return true;
                }
            }
        }
        return false;
    }

//Using DFS...
    bool checkCycle(int i,int pre,vector<int> adj[],vector<int> &vis){
        vis[i]=1;
        for(auto it : adj[i]){
            if(!vis[it]){
                if(checkCycle(it,i,adj,vis)) return true;;
            }else if(it!=pre) return true;
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> vis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(checkCycle(i,-1,adj,vis)){
                    return true;
                }
            }
        }
        return false;
    }
    
    Link - https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1/
