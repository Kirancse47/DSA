// Using XOR sum...
     int singleNonDuplicate(vector<int>& nums) {
        int ans=0;
        for(auto it : nums) ans^=it;
        return ans;
    }

// Using Binary Search...
    int singleNonDuplicate(vector<int>& nums) {
       if(nums.size()==1)
            return nums[0];
        int start=0,end=nums.size()-1,n=nums.size()-1;
        while(start<=end){
            int mid = start + ((end-start)/2);
            if((mid==0 && nums[mid]!=nums[mid+1]) || (mid==n && nums[mid]!=nums[mid-1]) ||(nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1]))
                return nums[mid];
           else if(nums[mid]==nums[mid-1] && (mid-2)%2==0)
                end=mid-1;
            else if(nums[mid]==nums[mid-1] && (mid-2)%2!=0)
                start=mid+1;
            else if(nums[mid]==nums[mid+1] && (n-(mid+2))%2==0)
                start=mid+1;
            else 
                end=mid-1;
        }
        return 0;
    }
