    Node* makeParent(Node* root,unordered_map<Node*,Node*> &parent,int tar){
        if(!root) return root;
        Node* node=NULL;
        queue<Node*> q;
        q.push(root);
        while(!q.empty()){
            Node* it=q.front();q.pop();
            if(it->data==tar) node=it;
            if(it->left){
                parent[it->left]=it;
                q.push(it->left);
            }
            if(it->right){
                parent[it->right]=it;
                q.push(it->right);
            }
        }
        return node;
    }
    
    vector <int> KDistanceNodes(Node* root, int target , int k){
        vector<int> ans;
        if(!root) return ans;
        unordered_map<Node*,Node*> parent;
        Node* node=makeParent(root,parent,target);
        if(!node) return ans;
        
        unordered_map<Node*,bool> vis;
        queue<Node*> q;
        
        q.push(node);
        vis[node]=true;
        int dis=1;
        
        while(!q.empty() && dis<=k){
            int size=q.size();
            for(int i=0;i<size;i++){
                Node* ptr=q.front();q.pop();
                if(ptr->left && !vis[ptr->left]){
                    q.push(ptr->left);
                    vis[ptr->left]=true;
                }
                if(ptr->right && !vis[ptr->right]){
                    q.push(ptr->right);
                    vis[ptr->right]=true;
                }
                if(parent[ptr] && !vis[parent[ptr]]){
                    q.push(parent[ptr]);
                    vis[parent[ptr]]=true;
                }
            }
            dis++;
        }
        while(!q.empty()){
            ans.push_back(q.front()->data);
            q.pop();
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
    
    Link - https://practice.geeksforgeeks.org/problems/nodes-at-given-distance-in-binary-tree/1#
