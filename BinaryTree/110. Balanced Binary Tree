// Brute Force...O(n^2)
    int Height(TreeNode* root) {
        if(!root) return 0;
        int l=Height(root->left);
        int r=Height(root->right);
        return 1+max(l,r);
    }
    bool isBalanced(TreeNode* root) {
        if(!root) return true;
        return (abs(Height(root->left)-Height(root->right))<=1) && isBalanced(root->left) && isBalanced(root->right);
    }
    
// Optimized...O(n)
    int dfsHeight(TreeNode* root) {
        if(!root) return 0;
        int l=dfsHeight(root->left);
        if(l==-1) return -1;
        int r=dfsHeight(root->right);
        if(r==-1) return -1;
        
        if(abs(l-r)>1) return -1;
        return 1+max(l,r);
    }
    bool isBalanced(TreeNode* root) {
        if(!root) return true;
        return dfsHeight(root)!=-1;
    }
