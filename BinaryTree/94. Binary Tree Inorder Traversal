//Recursive...
    vector<int> ans;
    vector<int> inorderTraversal(TreeNode* root) {
        if(!root) return ans;
        inorderTraversal(root->left);
        ans.push_back(root->val);
        inorderTraversal(root->right);
        return ans;
    }
    
//Iterative...
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        stack<TreeNode*> st;
        TreeNode *cur=root;
        while(!st.empty() || cur){
            if(cur){
                st.push(cur);
                cur=cur->left;
            }else{
                TreeNode *t=st.top();st.pop();
                ans.push_back(t->val);
                cur=t->right;
            }
        }
        return ans;
    }
    
//Morris.....   
    vector<int> inorderTraversal(TreeNode* root){
        vector<int> ans;
        TreeNode *cur=root;
        while(cur){
            if(!cur->left){
                ans.push_back(cur->val);
                cur=cur->right;
            }else{
                TreeNode *prev=cur->left;
                while(prev->right && prev->right!=cur){
                    prev=prev->right;
                }
                if(!prev->right){
                    prev->right=cur;
                    cur=cur->left;
                }else{
                    prev->right=NULL;
                    ans.push_back(cur->val);
                    cur=cur->right;
                }
            }
        }
        return ans;
    }
