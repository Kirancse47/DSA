// Memoization...
    int solve(int i,int j, vector<vector<int>>& g,vector<vector<int>>& dp){
        if(i==0 && j==0) return g[i][j];
        if(i<0 || j<0) return 1e9;
        if(dp[i][j]!=-1) return dp[i][j];
        int up=g[i][j]+solve(i-1,j,g,dp);
        int left=g[i][j]+solve(i,j-1,g,dp);
        return dp[i][j]=min(left,up);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(), n=grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return solve(m-1,n-1,grid,dp);
    }
    
// Tabulation....
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(), n=grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0) dp[i][j]=grid[0][0];
                else{
                    int up=grid[i][j],left=grid[i][j];
                    if(i>0) up+=dp[i-1][j];
                    else up+=1e9;
                    if(j>0) left+=dp[i][j-1];
                    else left+=1e9;
                    dp[i][j]=min(up,left);
                }
            }
        }
        return dp[m-1][n-1];
    }
    
// Space Optimized
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(), n=grid[0].size();
        vector<int> prev(n,0);
        for(int i=0;i<m;i++){
            vector<int> cur(n,0);
            for(int j=0;j<n;j++){
                if(i==0 && j==0) cur[j]=grid[0][0];
                else{
                    int up=grid[i][j],left=grid[i][j];
                    if(i>0) up+=prev[j];
                    else up+=1e9;
                    if(j>0) left+=cur[j-1];
                    else left+=1e9;
                    cur[j]=min(up,left);
                }
            }
            prev=cur;
        }
        return prev[n-1];
    }
    
