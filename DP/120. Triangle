 // recursive t-O(2^n) s-O(n)...
    int solve(int i,int j,int n,vector<vector<int>>& t){
        if(i==n-1) return t[i][j];
        int down=t[i][j]+solve(i+1,j,n,t);
        int dia=t[i][j]+solve(i+1,j+1,n,t);
        return min(down,dia);
    }
    int minimumTotal(vector<vector<int>>& triangle) {
          int n=triangle.size();
        return solve(0,0,n,triangle);
    }
    
// Memorization t-O(n^2) s-O(n^2)+O(n)...
    int solve(int i,int j,int n,vector<vector<int>>& t,vector<vector<int>>& dp){
        if(i==n-1) return t[i][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int down=t[i][j]+solve(i+1,j,n,t,dp);
        int dia=t[i][j]+solve(i+1,j+1,n,t,dp);
        return dp[i][j]=min(down,dia);
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return solve(0,0,n,triangle,dp);
    }
    
// Tabulation t-O(n^2) s-O(n^2)...
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,0));
        for(int i=0;i<n;i++) dp[n-1][i]=triangle[n-1][i];
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<=i;j++){
                dp[i][j]=triangle[i][j]+min(dp[i+1][j],dp[i+1][j+1]);
            }
        }
        return dp[0][0];
    }
    
// Space Optimaize t-O(n^2) s-O(n)...
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<int> prev(n,0);
        for(int i=0;i<n;i++) prev[i]=triangle[n-1][i];
        
        for(int i=n-2;i>=0;i--){
            vector<int> cur(n,0);
            for(int j=0;j<=i;j++){
                cur[j]=triangle[i][j]+min(prev[j],prev[j+1]);
            }
            prev=cur;
        }
        return prev[0];
    }
