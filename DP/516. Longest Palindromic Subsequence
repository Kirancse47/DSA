//Tabulation....
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        string rs=s;
        reverse(rs.begin(),rs.end());
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        for(int i=1;i<n+1;i++){
            for(int j=1;j<n+1;j++){
                if(s[i-1]==rs[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][n];
    }
    
    
// Space Optimize....
     int longestPalindromeSubseq(string s) {
        int n=s.size();
        vector<int>prev(n+1,0),cur(n+1,0);
        for(int i=1;i<n+1;i++){
            for(int j=1;j<n+1;j++){
                if(s[i-1]==s[n-j]) cur[j]=1+prev[j-1];
                else cur[j]=max(prev[j],cur[j-1]);
            }
            prev=cur;
        }
        return prev[n];
    }
