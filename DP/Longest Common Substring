// Tabulation....
    int longestCommonSubstr (string s1, string s2, int x, int y){
        vector<vector<int>> dp(x+1,vector<int>(y+1,0));
        int ans=0;
        for(int i=1;i<x+1;i++){
            for(int j=1;j<y+1;j++){
                if(s1[i-1]==s2[j-1]) dp[i][j]=1+dp[i-1][j-1];
                else dp[i][j]=0;
                ans=max(ans,dp[i][j]);
            }
        }
        return ans;
    }
    
// Space Optimization....
    int longestCommonSubstr (string s1, string s2, int x, int y){
        vector<int>prev(y+1,0),cur(y+1,0);
        int ans=0;
        for(int i=1;i<x+1;i++){
            for(int j=1;j<y+1;j++){
                if(s1[i-1]==s2[j-1]) cur[j]=1+prev[j-1];
                else cur[j]=0;
                ans=max(ans,cur[j]);
            }
            prev=cur;
        }
        return ans;
    }
    
// More Space Optimization....
    int longestCommonSubstr (string s1, string s2, int x, int y){
        vector<int>prev(y+1,0);
        int ans=0;
        for(int i=1;i<x+1;i++){
            for(int j=y;j>0;j--){
                if(s1[i-1]==s2[j-1]) prev[j]=1+prev[j-1];
                else prev[j]=0;
                ans=max(ans,prev[j]);
            }
        }
        return ans;
    }
