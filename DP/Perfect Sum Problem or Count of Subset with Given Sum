int mod=1e9+7;	

// Memoization...
    int solve(int i,int arr[],int s,vector<vector<int>> &dp){
        // if(s==0) return 1;
        // if(i==0) return 0;
        if(i==0){
            if(s==0) return 1;
            else return 0;
        }
        if(dp[i][s]!=-1) return dp[i][s];
        if(s>=arr[i-1]) return dp[i][s]=(solve(i-1,arr,s-arr[i-1],dp)%mod+solve(i-1,arr,s,dp)%mod)%mod;
        else return dp[i][s]=solve(i-1,arr,s,dp)%mod;
    }
    int perfectSum(int arr[], int n, int s){
	vector<vector<int>> dp(n+1,vector<int> (s+1,-1));
        return solve(n,arr,s,dp);
    }

// Tabulation...
	int perfectSum(int arr[], int n, int s){
	    vector<vector<int>> dp(n+1,vector<int> (s+1,0));
	    
	    for(int i=0;i<s+1;i++) dp[0][i]=0;
	    for(int i=0;i<n+1;i++) dp[i][0]=1;
	    
        for(int i=1;i<n+1;i++){
            for(int j=0;j<s+1;j++){
                if(arr[i-1]<=j){
                    dp[i][j]=(dp[i-1][j-arr[i-1]] + dp[i-1][j])%mod;
                }else{
                    dp[i][j]=dp[i-1][j]%mod;
                }
            }
        }
        return dp[n][s]%mod;
    }
	
// Space Optimized....
	int perfectSum(int arr[], int n, int sum){
		vector<int> prev(sum+1,0),cur(sum+1,0);
		prev[0]=1;cur[0]=1;
		for(int i=1;i<n+1;i++){
			for(int j=0;j<sum+1;j++){
				if(j-arr[i-1]>=0) cur[j]=(prev[j-arr[i-1]]+prev[j])%mod;
				else cur[j]=prev[j]%mod;
			}
			prev=cur;
		}
		return prev[sum]%mod;
	}  
	
Link - https://practice.geeksforgeeks.org/problems/perfect-sum-problem5633/1
