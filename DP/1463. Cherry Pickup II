int solve(int i,int j1,int j2,int n,int m,vector<vector<int>>& g,vector<vector<vector<int>>>& dp){
        if(j1<0 || j2<0 || j1>=m || j2>=m) return -1e8;
        if(i==n-1){
            if(j1==j2) return g[i][j1];
            else{
                return g[i][j1]+g[i][j2];
            }
        }
        if(dp[i][j1][j2]!=-1) return dp[i][j1][j2];
        int ans=-1e9;
        for(int d1=-1;d1<2;d1++){
            for(int d2=-1;d2<2;d2++){
                int res=0;
                if(j1==j2) res=g[i][j1]+solve(i+1,j1+d1,j2+d2,n,m,g,dp);
                else res=g[i][j1]+g[i][j2]+solve(i+1,j1+d1,j2+d2,n,m,g,dp);
                ans=max(ans,res);
            }
        }
        return dp[i][j1][j2]=ans;
    }
    
    int cherryPickup(vector<vector<int>>& grid) {
        int n=grid.size(), m=grid[0].size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
        return solve(0,0,m-1,n,m,grid,dp);
    }
