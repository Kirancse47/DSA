// Memorization....
    int solve(int i,int j,string &p,string &s,vector<vector<int>> &dp){
        if(i==0 && j==0) return true;
        if(i==0) return false;
        if(j==0){
            for(int k=1;k<=i;k++){
                if(p[k-1]!='*') return false;
            }
            return true;
        }
        
        if(dp[i][j]!=-1) return dp[i][j];
        if(p[i-1]==s[j-1] || p[i-1]=='?') return dp[i][j]=solve(i-1,j-1,p,s,dp);
        if(p[i-1]=='*') return dp[i][j]= solve(i-1,j,p,s,dp) || solve(i,j-1,p,s,dp);
        return false;
    }
    
    bool isMatch(string s, string p) {
        int n=p.size(), m=s.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return solve(n,m,p,s,dp);
    }
    
// Tabulation....
    bool isMatch(string s, string p) {
        int n=p.size(), m=s.size();
        vector<vector<bool>> dp(n+1,vector<int>(m+1,false));
        dp[0][0]=true;
        for(int j=1;j<m+1;j++) dp[0][j]=false;
        for(int i=1;i<n+1;i++){
            bool flag=true;
            for(int k=1;k<=i;k++){
                if(p[k-1]!='*'){
                    flag=false;
                    break;
                }
            }
            dp[i][0]=flag;
        }
        
        for(int i=1;i<n+1;i++){
            for(int j=1;j<m+1;j++){
                if(p[i-1]==s[j-1] || p[i-1]=='?') dp[i][j]=dp[i-1][j-1];
                else if(p[i-1]=='*') dp[i][j]=dp[i-1][j] || dp[i][j-1];
                else dp[i][j]=false;
            }
        }
        return dp[n][m];
    }
    
// Space Optimization....
    bool isMatch(string s, string p) {
        int n=p.size(), m=s.size();
        vector<bool> prev(m+1,false),cur(m+1,false);
        prev[0]=true;
        for(int j=1;j<m+1;j++) prev[j]=false;
        
        for(int i=1;i<n+1;i++){
            bool flag=true;
            for(int k=1;k<=i;k++){
                if(p[k-1]!='*'){
                    flag=false;
                    break;
                }
            }
            cur[0]=flag;
            for(int j=1;j<m+1;j++){
                if(p[i-1]==s[j-1] || p[i-1]=='?') cur[j]=prev[j-1];
                else if(p[i-1]=='*') cur[j]=prev[j] || cur[j-1];
                else cur[j]=false;
            }
            prev=cur;
        }
        return prev[m];
    }
