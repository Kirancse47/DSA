// Memorization.....
    vector<vector<int>> dp;
    int solve(int W, int wt[], int val[], int n){
      if(n==0 || W==0) return 0;
      if(dp[n][W]!=-1) return dp[n][W];
      if(W<wt[n-1]) return dp[n][W]=solve(W,wt,val,n-1);
      return dp[n][W]=max(val[n-1]+solve(W-wt[n-1],wt,val,n-1),solve(W,wt,val,n-1));    
    }
    int knapSack(int W, int wt[], int val[], int n){ 
        dp=vector<vector<int>>(n+1,vector<int>(W+1,-1));
        return solve(W,wt,val,n);
    }
    
// Tabulation....
    int knapSack(int W, int wt[], int val[], int n){
        vector<vector<int>> dp(n+1,vector<int>(W+1,0));
        for(int i=0;i<n+1;i++){
            for(int j=0;j<W+1;j++){
                if(i==0 || j==0) dp[i][j]=0;
                else if(j>=wt[i-1]) dp[i][j]=max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][W];
    }
    
// Space optimized....
    int knapSack(int W, int wt[], int val[], int n){
        vector<int> prev(W+1,0), cur(W+1,0);
        for(int i=0;i<n+1;i++){
            for(int j=0;j<W+1;j++){
                if(i==0 || j==0) cur[j]=0;
                else if(j>=wt[i-1]) cur[j]=max(val[i-1]+prev[j-wt[i-1]],prev[j]);
                else cur[j]=prev[j];
            }
            prev=cur;
        }
        return prev[W];
    }
    
// More Space optimized....
    int knapSack(int W, int wt[], int val[], int n){
        vector<int> dp(W+1,0);
        for(int i=1;i<n+1;i++){
            for(int j=W;j>=0;j--){
                if(j>=wt[i-1]) dp[j]=max(val[i-1]+dp[j-wt[i-1]],dp[j]);
            }
        }
        return dp[W];
    }
