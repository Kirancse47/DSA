// Tabulation....
    bool isSubsetSum(vector<int>arr, int sum){
        // code here
        int n=arr.size();
        vector<vector<int>> dp(n+1,vector<int>(sum+1,false));
        for(int i=0;i<n+1;i++){
            for(int j=0;j<sum+1;j++){
                if(i==0 || j==0){
                    if(i==0) dp[i][j]=false;
                    if(j==0) dp[i][j]=true;
                }
                else if(arr[i-1]<=j){
                    dp[i][j]=dp[i-1][j-arr[i-1]] || dp[i-1][j];
                }else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][sum];
    }
    
// Space Optimized...
    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        vector<bool> prev(sum+1,false),cur(sum+1,false);
        prev[0]=true;cur[0]=true;
        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                if(j-arr[i-1]>=0) cur[j]=prev[j-arr[i-1]] || prev[j];
                else cur[j]=prev[j];
            }
            prev=cur;
        }
        return prev[sum];
    }
    
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto it : nums) sum+=it;
        if(sum%2!=0) return false;
        else return isSubsetSum(nums,sum/2);
    }
