// Without dp...
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        if(n<2) return 0;
        int ans=0;
        for(int i=1;i<n;i++){
            if(prices[i]>prices[i-1]){
                ans+=prices[i]-prices[i-1];
            }
        }
        return ans;
    }
    
    // Memoization
    int solve(int i,int buy,vector<int> &p,vector<vector<int>> &dp){
        if(i==p.size()) return 0;
        if(dp[i][buy]!=-1) dp[i][buy];
        int ans;
        if(buy){
            ans=max(-p[i]+solve(i+1,0,p,dp),solve(i+1,1,p,dp));
        }else{
            ans=max(p[i]+solve(i+1,1,p,dp),solve(i+1,0,p,dp));
        }
        return dp[i][buy]=ans;
    }
     int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return solve(0,1,prices,dp);
    }
    
    // Tabulation...
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n+1,vector<int>(2,0));
        dp[n][0]=dp[n][1]=0;
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                if(j){
                    dp[i][j]=max(-prices[i]+dp[i+1][0],dp[i+1][1]);
                }else{
                    dp[i][j]=max(prices[i]+dp[i+1][1],dp[i+1][0]);
                }
            }
        }
        return dp[0][1];
    }
    
    // Space Optimization...
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<int> after(2,0),cur(2,0);
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                if(j){
                    cur[j]=max(-prices[i]+after[0],after[1]);
                }else{
                    cur[j]=max(prices[i]+after[1],after[0]);
                }
            }
            after=cur;
        }
        return after[1];
    }
