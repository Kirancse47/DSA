    long long solve(int i,int j,int a[],vector<vector<int>> &dp){
        if(i>j) return 0;
        if(i==j) return a[i];
        if(dp[i][j]!=-1) return dp[i][j];
        long long ci=a[i]+min(solve(i+2,j,a,dp),solve(i+1,j-1,a,dp));
        long long cj=a[j]+min(solve(i+1,j-1,a,dp),solve(i,j-2,a,dp));
        return dp[i][j]=max(ci,cj);
    }
    
    long long maximumAmount(int n, int arr[]){
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return solve(0,n-1,arr,dp);
    }

gfg link - https://www.geeksforgeeks.org/problems/optimal-strategy-for-a-game-1587115620/1
