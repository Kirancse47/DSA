// Recursive...
    int solve(int i,int j,vector<vector<int>>& g,vector<vector<int>>& dp){
        if(i>=0 && j>=0 && g[i][j]==1) return 0;
        if(i==0 && j==0) return 1;
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        return dp[i][j]=solve(i-1,j,g,dp)+solve(i,j-1,g,dp);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size(),n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return solve(m-1,n-1,obstacleGrid,dp);
    }
    
// Tabulation...
    int uniquePathsWithObstacles(vector<vector<int>>& g) {
        int m=g.size(),n=g[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(g[i][j]==1) dp[i][j]=0;
                else if(i==0 && j==0) dp[i][j]=1;
                else dp[i][j]=(i>0 ? dp[i-1][j] : 0)+(j>0 ? dp[i][j-1] : 0);
            }
        }
        return dp[m-1][n-1];
    }
    
// Space Optimized...
    int uniquePathsWithObstacles(vector<vector<int>>& g) {
        int m=g.size(),n=g[0].size();
        vector<int> prev(n,0);
        for(int i=0;i<m;i++){
            vector<int> cur(n,0);
            for(int j=0;j<n;j++){
                if(g[i][j]==1) cur[j]=0;
                else if(i==0 && j==0) cur[j]=1;
                else cur[j]=prev[j]+(j>0 ? cur[j-1] : 0);
            }
            prev=cur;
        }
        return prev[n-1];
    }
