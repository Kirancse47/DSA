    bool solve(int i,int j,int k,string &s1,string &s2,string &s3,vector<vector<vector<int>>> &dp){
        if(i==0 && j==0 && k==0) return 1;
        if(dp[i][j][k]!=-1) return dp[i][j][k];
        if(i>0 && j>0 && k>0 && s1[i-1]==s3[k-1] && s2[j-1]==s3[k-1]) return dp[i][j][k]=solve(i-1,j,k-1,s1,s2,s3,dp)||solve(i,j-1,k-1,s1,s2,s3,dp);
        if(i>0 && k>0 && s1[i-1]==s3[k-1]) return dp[i][j][k]=solve(i-1,j,k-1,s1,s2,s3,dp);
        if(j>0 && k>0 && s2[j-1]==s3[k-1]) return dp[i][j][k]=solve(i,j-1,k-1,s1,s2,s3,dp);
        return dp[i][j][k]=0;        
    }
    
    bool isInterleave(string s1, string s2, string s3) {
        int l=s1.size(),m=s2.size(),n=s3.size();
        if(l+m!=n) return 0;
        vector<vector<vector<int>>> dp(l+1,vector<vector<int>>(m+1,vector<int>(n+1,-1)));
        return solve(l,m,n,s1,s2,s3,dp);
    }
