// Space Optimized...
    int knapSack(int N, int W, int val[], int wt[]){
        vector<int> prev(W+1,0),cur(W+1,0);
    	for(int i=1;i<N+1;i++){
    		for(int j=1;j<W+1;j++){
    			if(j>=wt[i-1]) cur[j]=max(val[i-1]+cur[j-wt[i-1]],prev[j]);
    			else cur[j]=prev[j];
    		}
    		prev=cur;
    	}
    	return prev[W];
    }

// More Space Optimized...
    int knapSack(int N, int W, int val[], int wt[]){
        vector<int> prev(W+1,0);
    	for(int i=1;i<N+1;i++){
    		for(int j=1;j<W+1;j++){
    			if(j>=wt[i-1]) prev[j]=max(val[i-1]+prev[j-wt[i-1]],prev[j]);
    		}
    	}
    	return prev[W];
    }
