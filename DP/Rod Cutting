// Memorization....
    int solve(int n,int l,int price[],vector<vector<int>> &dp){
        if(n==0 || l==0) return 0;
        if(dp[n][l]!=-1) return dp[n][l];
        if(l>=n) return dp[n][l]=max(price[n-1]+solve(n,l-n,price,dp),solve(n-1,l,price,dp));
        else return dp[n][l]=solve(n-1,l,price,dp);
    }
    
    int cutRod(int price[], int n) {
        //code here
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        return solve(n,n,price,dp);
        
    }
    
// Tabulation.... 
    int cutRod(int price[], int n) {
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        for(int i=1;i<n+1;i++){
            for(int j=1;j<n+1;j++){
                if(i<=j) dp[i][j]=max(price[i-1]+dp[i][j-i],dp[i-1][j]);
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][n];
    }
    
// Space Optimize.....
    int cutRod(int price[], int n) {
        vector<int> dp(n+1,0);
        for(int i=1;i<n+1;i++){
            for(int j=1;j<n+1;j++){
                if(i<=j) dp[j]=max(price[i-1]+dp[j-i],dp[j]);
            }
        }
        return dp[n];
    }
