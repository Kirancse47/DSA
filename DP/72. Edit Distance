// Memorization...
    int solve(int i,int j,string &w1,string &w2,vector<vector<int>> &dp){
        if(i==0) return j;
        if(j==0) return i;
        if(dp[i][j]!=-1) return dp[i][j];
        if(w1[i-1]==w2[j-1]) return dp[i][j]=solve(i-1,j-1,w1,w2,dp);
        return dp[i][j]=1+min(solve(i-1,j-1,w1,w2,dp),min(solve(i-1,j,w1,w2,dp),solve(i,j-1,w1,w2,dp)));
    }
    int minDistance(string word1, string word2) {
        int n=word1.size(), m=word2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return solve(n,m,word1,word2,dp);
    }
    
// Tabulation...
    int minDistance(string word1, string word2) {
        int n=word1.size(), m=word2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        for(int i=0;i<n+1;i++) dp[i][0]=i;
        for(int j=0;j<m+1;j++) dp[0][j]=j;
        for(int i=1;i<n+1;i++){
            for(int j=1;j<m+1;j++){
                if(word1[i-1]==word2[j-1]) dp[i][j]=dp[i-1][j-1];
                else dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
            }
        }
        return dp[n][m];
    }
    
// space optimize....
    int minDistance(string word1, string word2) {
        int n=word1.size(), m=word2.size();
        vector<int> prev(m+1,0),cur(m+1,0);
        for(int j=0;j<m+1;j++) prev[j]=j;
        for(int i=1;i<n+1;i++){
            cur[0]=i;
            for(int j=1;j<m+1;j++){
                if(word1[i-1]==word2[j-1]) cur[j]=prev[j-1];
                else cur[j]=1+min(prev[j-1],min(prev[j],cur[j-1]));
            }
            prev=cur;
        }
        return prev[m];
    }
