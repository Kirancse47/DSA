// Memoization...
    bool solve(int n,int t,vector<int> &a,vector<vector<int>> &dp){
        if(t==0) return true;
        if(n==0) return false;
        if(dp[n][t]!=-1) return dp[n][t];
        if(t>=a[n-1]) return dp[n][t]=solve(n-1,t-a[n-1],a,dp) || solve(n-1,t,a,dp);  // take || notetake
        else return dp[n][t]=solve(n-1,t,a,dp);
    }
    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        vector<vector<int>> dp(n+1,vector<int>(sum+1,-1));
        return solve(n,sum,arr,dp);
    }

// Tabulation....
    bool isSubsetSum(vector<int>arr, int sum){ 
        int n=arr.size();
        vector<vector<bool>> dp(n+1,vector<bool>(sum+1,false));
        for(int i=0;i<=sum;i++) dp[0][i]=false;
        for(int i=0;i<=n;i++) dp[i][0]=true;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum;j++){
                if(j-arr[i-1]>=0) dp[i][j]=dp[i-1][j-arr[i-1]] || dp[i-1][j];
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][sum];
    }
    
// Space Optimized....
    bool isSubsetSum(vector<int>arr, int sum){ 
        int n=arr.size();
        vector<bool> prev(sum+1,false),cur(sum+1,false);
        prev[0]=true;cur[0]=true;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum;j++){
                if(j-arr[i-1]>=0) cur[j]=prev[j-arr[i-1]] || prev[j];
                else cur[j]=prev[j];
            }
            prev=cur;
        }
        return prev[sum];
    }

// More Space Optimized..
    bool isSubsetSum(vector<int>arr, int sum){ 
        int n=arr.size();
        vector<bool> prev(sum+1,false);
        prev[0]=true;
        for(int i=1;i<=n;i++){
            for(int j=sum;j>=0;j--){
                if(j-arr[i-1]>=0) prev[j]=prev[j-arr[i-1]] || prev[j];
            }
        }
        return prev[sum];
    }
