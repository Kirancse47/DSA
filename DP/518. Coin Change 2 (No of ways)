// Memoization...
    int solve(int n,int amt,vector<int> &coins,vector<vector<int>> &dp){
        if(amt==0) return 1;
        if(n==0) return 0;
        if(dp[n][amt]!=-1) return dp[n][amt];
        if(amt>=coins[n-1]) return dp[n][amt]=solve(n,amt-coins[n-1],coins,dp)+solve(n-1,amt,coins,dp);
        else return dp[n][amt]=solve(n-1,amt,coins,dp);
    }
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>> dp(n+1,vector<int>(amount+1,-1));
        return solve(n,amount,coins,dp);
    }
    
// Tabulation....
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>> dp(n+1,vector<int>(amount+1,0));
        for(int i=0;i<n+1;i++) dp[i][0]=1;
        
        for(int i=1;i<n+1;i++){
            for(int j=1;j<amount+1;j++){
                if(j>=coins[i-1]) dp[i][j]=dp[i][j-coins[i-1]]+dp[i-1][j];
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][amount];
    }
    
// Space Optimized....
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<int> prev(amount+1,0), cur(amount+1,0);
        prev[0]=1;cur[0]=1;
        for(int i=1;i<n+1;i++){
            for(int j=1;j<amount+1;j++){
                if(j>=coins[i-1]) cur[j]=cur[j-coins[i-1]]+prev[j];
                else cur[j]=prev[j];
            }
            prev=cur;
        }
        return prev[amount];
    }
    
// More Space Optimized....
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<int> prev(amount+1,0);
        prev[0]=1;
        for(int i=1;i<n+1;i++){
            for(int j=1;j<=amount;j++){
                if(j>=coins[i-1]) prev[j]=prev[j-coins[i-1]]+prev[j];
            }
        }
        return prev[amount];
    }
