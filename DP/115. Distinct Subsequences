 int mod=1e9+7;
    
// Memorization...
    int solve(int n,int m,string s,string t,vector<vector<int>> &dp){
        if(m==0) return 1;
        if(n==0) return 0;
        if(dp[n][m]!=-1) return dp[n][m];
        if(s[n-1]==t[m-1]) return dp[n][m]=( solve(n-1,m-1,s,t,dp) + solve(n-1,m,s,t,dp) )%mod;
        else return dp[n][m]=(solve(n-1,m,s,t,dp))%mod;
    }
     
    int numDistinct(string s, string t) {
        int n=s.size(),m=t.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return solve(n,m,s,t,dp);
    }
    
// Tabulation...
    int numDistinct(string s, string t) {
      int n=s.size(),m=t.size();
      vector<vector<int>> dp(n+1,vector<int>(m+1,0));
      for(int i=0;i<n+1;i++) dp[i][0]=1;
      
      for(int i=1;i<n+1;i++){
          for(int j=1;j<m+1;j++){
              if(s[i-1]==t[j-1]) dp[i][j]=(dp[i-1][j-1]+dp[i-1][j])%mod;
              else dp[i][j]=dp[i-1][j]%mod;
          }
      }
      return dp[n][m];
    }
    
// Space Optimize...
    int numDistinct(string s, string t) {
      int n=s.size(),m=t.size();
      vector<int> prev(m+1,0),cur(m+1,0);
      prev[0]=1; cur[0]=1;
      
      for(int i=1;i<n+1;i++){
          for(int j=1;j<m+1;j++){
              if(s[i-1]==t[j-1]) cur[j]=(prev[j-1]+prev[j])%mod;
              else cur[j]=prev[j] % mod;
          }
          prev=cur;
      }
      return prev[m];
    }
    
// More Space Optimize...
    int numDistinct(string s, string t) {
      int n=s.size(),m=t.size();
      vector<int> dp(m+1,0);
      dp[0]=1;
      
      for(int i=1;i<n+1;i++){
          for(int j=m;j>0;j--){
              if(s[i-1]==t[j-1]) dp[j]=(dp[j-1]+dp[j])%mod;
          }
      }
      return dp[m];
    }
