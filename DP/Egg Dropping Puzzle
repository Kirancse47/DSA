// DP...
    int solve(int e,int f,vector<vector<int>> &dp){
        if(f==0 || f==1) return f;
        if(e==1) return f;
        if(dp[e][f]!=-1) return dp[e][f];
        int ans=INT_MAX;
        for(int k=1;k<=f;k++){
            int temp=1+max(solve(e-1,k-1,dp),solve(e,f-k,dp));
            ans=min(ans,temp);
        }
        return dp[e][f]=ans;
    }
    
    int eggDrop(int n, int k) {
        vector<vector<int>> dp(n+1,vector<int>(k+1,-1));
        return solve(n,k,dp);
    }
    
// Binary Search + DP...
    int solve(int e,int f,vector<vector<int>> &dp){
        if(f==1 || f==0) return f;
        if(e==1) return f;
        if(dp[e][f]!=-1) return dp[e][f];
        int ans=INT_MAX;
        int start=1,end=f;
        while(start<=end){
            int mid=start+(end-start)/2;
            int low=solve(e-1,mid-1,dp);
            int high=solve(e,f-mid,dp);
            int temp=1+max(low,high);
            ans=min(ans,temp);
            if(high>low) start=mid+1;
            else end=mid-1;
        }
        return dp[e][f]=ans;
    }
    
    int eggDrop(int n, int k) {
        vector<vector<int>> dp(n+1,vector<int>(k+1,-1));
        return solve(n,k,dp);
    }
    
 Link - https://practice.geeksforgeeks.org/problems/egg-dropping-puzzle-1587115620/1#
