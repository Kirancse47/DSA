// Recursive....
    int climbStairs(int n) {
        if(n==1) return 1;
        if(n==2) return 2;
        return climbStairs(n-1)+climbStairs(n-2);
    }
    
// Memoization...
    int solve(int n,vector<int> &dp) {
        if(n==1) return 1;
        if(n==2) return 2;
        if(dp[n]!=-1) return dp[n];
        return dp[n]=solve(n-1,dp)+solve(n-2,dp);
    }
    int climbStairs(int n) {
        if(n==1) return 1;
        if(n==2) return 2;
        vector<int> dp(n+1,-1);
        return solve(n,dp);
    }
    
// Tabulation...
    int climbStairs(int n) {
        if(n==1) return 1;
        if(n==2) return 2;
        vector<int> dp(n+1,-1);
        dp[1]=1;dp[2]=2;
        for(int i=3;i<n+1;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
    
// Space Optimized...
    int climbStairs(int n) {
        if(n==1) return 1;
        if(n==2) return 2;
        int dp1=1,dp2=2;
        for(int i=3;i<n+1;i++){
            int dpi=dp1+dp2;
            dp1=dp2;
            dp2=dpi;
        }
        return dp2;
    }
