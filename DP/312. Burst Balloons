// Memoization...
    int solve(int i,int j,vector<int> &nums,vector<vector<int>> &dp){
        if(i>j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int ans=INT_MIN;
        for(int k=i;k<=j;k++){
            ans=max(ans,solve(i,k-1,nums,dp)+solve(k+1,j,nums,dp)+nums[i-1]*nums[k]*nums[j+1]);
        }
        return dp[i][j]=ans;
    }
    int maxCoins(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        nums.insert(nums.begin(),1);
        nums.push_back(1);
        return solve(1,n,nums,dp);
    }
    
// Tabulation...    
    int maxCoins(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> dp(n+2,vector<int>(n+2,0));
        nums.insert(nums.begin(),1);
        nums.push_back(1);
        
        for(int i=n;i>=1;i--){
            for(int j=i;j<n+1;j++){
                int ans=INT_MIN;
                for(int k=i;k<=j;k++){
                    ans=max(ans,dp[i][k-1]+dp[k+1][j]+nums[i-1]*nums[k]*nums[j+1]);
                }
                dp[i][j]=ans;
            }
        }
        return dp[1][n];
    }
