// Recursive..
    bool solve(int i,int j,string &s,string &p){
        if(i==0 && j==0) return true;
        if(j==0) return false;
        if(i==0){
            if(p[j-1]=='*') return solve(i,j-2,s,p);
            else return false;
        }
        if(s[i-1]==p[j-1] || p[j-1]=='.') return solve(i-1,j-1,s,p);
        if(p[j-1]=='*'){
            if(s[i-1]==p[j-2] || p[j-2]=='.') return solve(i-1,j,s,p) || solve(i,j-2,s,p);
            else return solve(i,j-2,s,p);
        }
        return false;
    }
    
    bool isMatch(string s, string p) {
        int n=s.size(),m=p.size();
        return solve(n,m,s,p);
    }
   
    
// Memoization...
    bool solve(int i,int j,string &s,string &p,vector<vector<int>> &dp){
        if(i==0 && j==0) return true;
        if(j==0) return false;
        if(i==0){
            if(p[j-1]=='*') return solve(i,j-2,s,p,dp);
            else return false;
        }
        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i-1]==p[j-1] || p[j-1]=='.') return dp[i][j]=solve(i-1,j-1,s,p,dp);
        if(p[j-1]=='*'){
            if(s[i-1]==p[j-2] || p[j-2]=='.') return dp[i][j]=solve(i-1,j,s,p,dp) || solve(i,j-2,s,p,dp);
            else return dp[i][j]=solve(i,j-2,s,p,dp);
        }
        return dp[i][j]=false;
    }
    
    bool isMatch(string s, string p) {
        int n=s.size(),m=p.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return solve(n,m,s,p,dp);
    }
