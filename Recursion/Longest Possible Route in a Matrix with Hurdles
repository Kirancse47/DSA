  void dfs(int x,int y,int dis,vector<vector<int>> &matrix,int &n,int &m,vector<vector<bool>> &vis,int &xd,int &yd,int &mx){
       if(x == xd && y == yd){
           mx = max(mx,dis);
           return;
       }
       
       int dx[] = {-1,0,1,0};
       int dy[] = {0,1,0,-1};
       
       for(int i = 0; i < 4; i++){
           int nx = x + dx[i];
           int ny = y + dy[i];
           if(nx>=0 && ny>=0 && nx<n && ny<m && !vis[nx][ny] && matrix[nx][ny]){
               vis[nx][ny] = true;
               dfs(nx,ny,dis+1,matrix,n,m,vis,xd,yd,mx);
               vis[nx][ny] = false;
           }
       }
   }
    
    int longestPath(vector<vector<int>> matrix, int xs, int ys, int xd, int yd){
       if(matrix[xs][ys] == 0 || matrix[xd][yd] == 0) return -1;
       int n = matrix.size(), m = matrix[0].size();
       vector<vector<bool>> vis(n,vector<bool>(m,false));
       
       int mx = -1;
       vis[xs][ys] = true;
       dfs(xs,ys,0,matrix,n,m,vis,xd,yd,mx);
       return mx;
    }
    
    Link- https://practice.geeksforgeeks.org/problems/longest-possible-route-in-a-matrix-with-hurdles/1#
