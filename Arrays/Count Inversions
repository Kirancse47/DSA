long long int merge(long long a[],long long p,long long q,long long r){
        long long  n1=q-p+1;
        long long n2=r-q;
        long long  a1[n1];
        long long  a2[n2];
        long long int inv=0;
    
        for(long long i=0;i<n1;i++){
            a1[i]=a[p+i];
        }
    
        for(long long j=0;j<n2;j++){
            a2[j]=a[q+1+j];
        }
    
        long long i=0,j=0,k=p;
        while(i<n1 && j<n2){
            if(a1[i]<=a2[j]){
                a[k]=a1[i];
                k++; i++;
            }else{
                a[k]=a2[j];
                inv+=n1-i;   // a1[i] > a2[j] and i < j 
                k++; j++;
            }
        }
    
        while(i<n1){
            a[k]=a1[i];
            k++; i++;
        }
    
        while(j<n2){
            a[k]=a2[j];
            k++; j++;
        }
        return inv;
    }
    
    long long int mergeSort(long long a[],long long f,long long l){
        long long int inv=0;
        if(f<l){
            long long m=(f+l)/2;
            inv+=mergeSort(a,f,m);
            inv+=mergeSort(a,m+1,l);
            inv+=merge(a,f,m,l);
        }
        return inv;
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        return mergeSort(arr,0,N-1);
       
    }
