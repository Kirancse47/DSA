// Using DP....
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n+1,0);
        int ans=INT_MIN;
        for(int i=1;i<n+1;i++){
            dp[i]=max(nums[i-1],nums[i-1]+dp[i-1]);
            ans=max(ans,dp[i]);
        }
        return ans;
    }
    
// Kadarn's algo...
    int maxSubArray(vector<int>& nums) {
        int currmax = 0, max = INT_MIN;
        
        for(int i = 0; i < nums.size(); i++){
            currmax += nums[i];
            if(max < currmax) max = currmax;
            if(currmax < 0) currmax = 0;
        }
        return max;
    }
