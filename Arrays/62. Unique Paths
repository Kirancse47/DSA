// //Recursive....
    // int solve(int i,int j){
    //     if(i==0 && j==0) return 1;
    //     if(i<0 || j<0) return 0;
    //     return solve(i-1,j)+solve(i,j-1);
    // }
    // int uniquePaths(int m, int n) {
    //     return solve(m-1,n-1);
    // }

// //Memorization....
    // int solve(int i,int j,vector<vector<int>> &dp){
    //     if(i==0 && j==0) return 1;
    //     if(i<0 || j<0) return 0;
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     return dp[i][j]=solve(i-1,j,dp)+solve(i,j-1,dp);
    // }
    // int uniquePaths(int m, int n) {
    //     vector<vector<int>> dp(m,vector<int>(n,-1));
    //     return solve(m-1,n-1,dp);
    // }
    
// //Tabulation...
    // int uniquePaths(int m, int n) {
    //     vector<vector<int>> dp(m,vector<int>(n,0));
    //     for(int i=0;i<m;i++){
    //         for(int j=0;j<n;j++){
    //             if(i==0 && j==0) dp[i][j]=1;
    //             else dp[i][j]= (i>0 ? dp[i-1][j] : 0) + (j>0 ? dp[i][j-1] : 0);
    //         }
    //     }
    //     return dp[m-1][n-1];        
    // }
    
//Space optimization...
    int uniquePaths(int m, int n) {
        vector<int> prev(n,1);
        for(int i=1;i<m;i++){
            vector<int> cur(n,1);
            for(int j=1;j<n;j++){
                cur[j]=cur[j-1]+prev[j];
            }
            prev=cur;
        }
        return prev[n-1];        
    }
